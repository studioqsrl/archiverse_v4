name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  ACR_NAME: archiverseacr
  IMAGE_NAME: archiverse

# Prevent concurrent deployments for same ref/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for PR creation
      
      - name: Set up yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq
      
      - name: Log in to Azure
        run: |
          # Parse Azure credentials
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          CLIENT_ID=$(jq -r .clientId azure_credentials.json)
          CLIENT_SECRET=$(jq -r .clientSecret azure_credentials.json)
          TENANT_ID=$(jq -r .tenantId azure_credentials.json)
          rm azure_credentials.json
          
          # Login to Azure
          az login --service-principal \
            --username "$CLIENT_ID" \
            --password "$CLIENT_SECRET" \
            --tenant "$TENANT_ID"
          
          # Get ACR credentials
          ACR_CREDS=$(az acr credential show -n ${{ env.ACR_NAME }})
          ACR_USERNAME=$(echo "$ACR_CREDS" | jq -r .username)
          ACR_PASSWORD=$(echo "$ACR_CREDS" | jq -r '.passwords[0].value')
          
          # Login to ACR
          echo "$ACR_PASSWORD" | docker login ${{ env.ACR_NAME }}.azurecr.io -u "$ACR_USERNAME" --password-stdin
          
      - name: Set up QEMU
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
      - name: Set up Docker Buildx
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
        
      - name: Build and push image
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --push \
            --cache-from=type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:buildcache \
            --cache-to=type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:buildcache,mode=max \
            --tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
            .
            
      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          
      - name: Determine environment
        run: |
          if [[ ${{ github.ref }} == refs/heads/main ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          fi
          
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@archiverse.dev"
          
      - name: Update Kustomization
        run: |
          # Create new branch
          git checkout -b update-image-${{ env.SHORT_SHA }}
          
          # Update image tag in kustomization
          cd infrastructure/apps/overlays/${{ env.DEPLOY_ENV }}
          
          # Update image tag using yq
          yq e -i '.images[0].newTag = "${{ github.sha }}"' kustomization.yaml
          
          # Commit and push changes
          git add kustomization.yaml
          git commit -m "Update image tag to ${{ github.sha }} for ${{ env.DEPLOY_ENV }} environment"
          git push origin update-image-${{ env.SHORT_SHA }}
          
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR using GitHub CLI
          gh pr create \
            --title "Update ${{ env.DEPLOY_ENV }} image to ${{ github.sha }}" \
            --body "Automated PR to update image tag for ${{ env.DEPLOY_ENV }} environment

            - New image tag: \`${{ github.sha }}\`
            - Environment: \`${{ env.DEPLOY_ENV }}\`
            - Triggered by commit: ${{ github.sha }}" \
            --base ${{ github.ref_name }} \
            --head update-image-${{ env.SHORT_SHA }} \
            --label "automated-pr" \
            --label "image-update" \
            --label "environment/${{ env.DEPLOY_ENV }}"
